<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[

'App__Domain__Article__Article__CLASSMETADATA__' => 0,
'App__Domain__Comment__Comment__CLASSMETADATA__' => 1,
'App__Domain__Tag__Tag__CLASSMETADATA__' => 2,
'App__Domain__User__User__CLASSMETADATA__' => 3,

], [

0 => new class() implements \Symfony\Component\Cache\Traits\CachedValueInterface { public function getValue(): mixed { return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
        clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
        clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
        clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping')),
        clone ($p['Doctrine\\ORM\\Mapping\\JoinTableMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinTableMapping')),
        clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\JoinTableMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
        clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
        clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
    ],
    null,
    [
        'stdClass' => [
            'namespace' => [
                'App\\Domain\\Article',
            ],
            'rootEntityName' => [
                'App\\Domain\\Article\\Article',
            ],
            'identifier' => [
                [
                    'id',
                ],
            ],
            'generatorType' => [
                4,
            ],
            'fieldMappings' => [
                [
                    'id' => $o[1],
                    'title' => $o[2],
                    'slug' => $o[3],
                    'description' => $o[4],
                    'body' => $o[5],
                    'createdAt' => $o[6],
                    'updatedAt' => $o[7],
                ],
            ],
            'fieldNames' => [
                [
                    'id' => 'id',
                    'title' => 'title',
                    'slug' => 'slug',
                    'description' => 'description',
                    'body' => 'body',
                    'created_at' => 'createdAt',
                    'updated_at' => 'updatedAt',
                ],
            ],
            'columnNames' => [
                [
                    'id' => 'id',
                    'title' => 'title',
                    'slug' => 'slug',
                    'description' => 'description',
                    'body' => 'body',
                    'createdAt' => 'created_at',
                    'updatedAt' => 'updated_at',
                ],
            ],
            'table' => [
                [
                    'name' => 'articles',
                    'uniqueConstraints' => [
                        'uniq_article_slug' => [
                            'columns' => [
                                'slug',
                            ],
                        ],
                    ],
                ],
            ],
            'associationMappings' => [
                [
                    'author' => $o[8],
                    'tags' => $o[10],
                    'favoritedBy' => $o[14],
                    'comments' => $o[18],
                ],
            ],
            'idGenerator' => [
                $o[19],
            ],
            'name' => [
                'App\\Domain\\Article\\Article',
                9 => 'author_id',
                11 => 'article_tags',
                'article_id',
                'tag_id',
                15 => 'article_favorites',
                'article_id',
                'user_id',
            ],
            'id' => [
                1 => true,
            ],
            'type' => [
                1 => 'integer',
                'string',
                'string',
                'string',
                'text',
                'datetime_immutable',
                'datetime_immutable',
            ],
            'fieldName' => [
                1 => 'id',
                'title',
                'slug',
                'description',
                'body',
                'createdAt',
                'updatedAt',
            ],
            'columnName' => [
                1 => 'id',
                'title',
                'slug',
                'description',
                'body',
                'created_at',
                'updated_at',
            ],
            'length' => [
                2 => 255,
                255,
                255,
            ],
            'fetch' => [
                8 => 2,
                10 => 2,
                14 => 2,
                18 => 2,
            ],
            'sourceEntity' => [
                8 => 'App\\Domain\\Article\\Article',
                10 => 'App\\Domain\\Article\\Article',
                14 => 'App\\Domain\\Article\\Article',
                18 => 'App\\Domain\\Article\\Article',
            ],
            'inversedBy' => [
                8 => 'articles',
                10 => 'articles',
            ],
            'sourceToTargetKeyColumns' => [
                8 => [
                    'author_id' => 'id',
                ],
            ],
            'targetToSourceKeyColumns' => [
                8 => [
                    'id' => 'author_id',
                ],
            ],
            'joinColumns' => [
                8 => [
                    $o[9],
                ],
                11 => [
                    $o[12],
                ],
                15 => [
                    $o[16],
                ],
            ],
            'joinColumnFieldNames' => [
                8 => [
                    'author_id' => 'author_id',
                ],
            ],
            'deferrable' => [
                9 => false,
                16 => false,
                false,
            ],
            'unique' => [
                9 => false,
                16 => false,
                false,
            ],
            'onDelete' => [
                9 => 'CASCADE',
                12 => 'CASCADE',
                'CASCADE',
                16 => 'CASCADE',
                'CASCADE',
            ],
            'nullable' => [
                9 => false,
                12 => false,
                false,
                16 => false,
                false,
            ],
            'referencedColumnName' => [
                9 => 'id',
                12 => 'id',
                'id',
                16 => 'id',
                'id',
            ],
            'cascade' => [
                10 => [
                    'persist',
                ],
                18 => [
                    'remove',
                ],
            ],
            'isOnDeleteCascade' => [
                10 => true,
                14 => true,
            ],
            'joinTable' => [
                10 => $o[11],
                14 => $o[15],
            ],
            'joinTableColumns' => [
                10 => [
                    'article_id',
                    'tag_id',
                ],
                14 => [
                    'article_id',
                    'user_id',
                ],
            ],
            'relationToSourceKeyColumns' => [
                10 => [
                    'article_id' => 'id',
                ],
                14 => [
                    'article_id' => 'id',
                ],
            ],
            'relationToTargetKeyColumns' => [
                10 => [
                    'tag_id' => 'id',
                ],
                14 => [
                    'user_id' => 'id',
                ],
            ],
            'inverseJoinColumns' => [
                11 => [
                    $o[13],
                ],
                15 => [
                    $o[17],
                ],
            ],
            'orphanRemoval' => [
                18 => true,
            ],
            'mappedBy' => [
                18 => 'article',
            ],
        ],
        'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
            'fieldName' => [
                8 => 'author',
                10 => 'tags',
                14 => 'favoritedBy',
                18 => 'comments',
            ],
            'targetEntity' => [
                8 => 'App\\Domain\\User\\User',
                10 => 'App\\Domain\\Tag\\Tag',
                14 => 'App\\Domain\\User\\User',
                18 => 'App\\Domain\\Comment\\Comment',
            ],
        ],
    ],
    $o[0],
    []
); } },
1 => new class() implements \Symfony\Component\Cache\Traits\CachedValueInterface { public function getValue(): mixed { return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
        clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
        clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
        clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
        clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
    ],
    null,
    [
        'stdClass' => [
            'namespace' => [
                'App\\Domain\\Comment',
            ],
            'rootEntityName' => [
                'App\\Domain\\Comment\\Comment',
            ],
            'identifier' => [
                [
                    'id',
                ],
            ],
            'generatorType' => [
                4,
            ],
            'fieldMappings' => [
                [
                    'id' => $o[1],
                    'body' => $o[2],
                    'createdAt' => $o[3],
                    'updatedAt' => $o[4],
                ],
            ],
            'fieldNames' => [
                [
                    'id' => 'id',
                    'body' => 'body',
                    'created_at' => 'createdAt',
                    'updated_at' => 'updatedAt',
                ],
            ],
            'columnNames' => [
                [
                    'id' => 'id',
                    'body' => 'body',
                    'createdAt' => 'created_at',
                    'updatedAt' => 'updated_at',
                ],
            ],
            'table' => [
                [
                    'name' => 'comments',
                ],
            ],
            'associationMappings' => [
                [
                    'article' => $o[5],
                    'author' => $o[7],
                ],
            ],
            'idGenerator' => [
                $o[9],
            ],
            'name' => [
                'App\\Domain\\Comment\\Comment',
                6 => 'article_id',
                8 => 'author_id',
            ],
            'id' => [
                1 => true,
            ],
            'type' => [
                1 => 'integer',
                'text',
                'datetime_immutable',
                'datetime_immutable',
            ],
            'fieldName' => [
                1 => 'id',
                'body',
                'createdAt',
                'updatedAt',
            ],
            'columnName' => [
                1 => 'id',
                'body',
                'created_at',
                'updated_at',
            ],
            'fetch' => [
                5 => 2,
                7 => 2,
            ],
            'sourceEntity' => [
                5 => 'App\\Domain\\Comment\\Comment',
                7 => 'App\\Domain\\Comment\\Comment',
            ],
            'inversedBy' => [
                5 => 'comments',
            ],
            'sourceToTargetKeyColumns' => [
                5 => [
                    'article_id' => 'id',
                ],
                7 => [
                    'author_id' => 'id',
                ],
            ],
            'targetToSourceKeyColumns' => [
                5 => [
                    'id' => 'article_id',
                ],
                7 => [
                    'id' => 'author_id',
                ],
            ],
            'joinColumns' => [
                5 => [
                    $o[6],
                ],
                7 => [
                    $o[8],
                ],
            ],
            'joinColumnFieldNames' => [
                5 => [
                    'article_id' => 'article_id',
                ],
                7 => [
                    'author_id' => 'author_id',
                ],
            ],
            'deferrable' => [
                6 => false,
                8 => false,
            ],
            'unique' => [
                6 => false,
                8 => false,
            ],
            'onDelete' => [
                6 => 'CASCADE',
                8 => 'CASCADE',
            ],
            'nullable' => [
                6 => false,
                8 => false,
            ],
            'referencedColumnName' => [
                6 => 'id',
                8 => 'id',
            ],
        ],
        'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
            'fieldName' => [
                5 => 'article',
                7 => 'author',
            ],
            'targetEntity' => [
                5 => 'App\\Domain\\Article\\Article',
                7 => 'App\\Domain\\User\\User',
            ],
        ],
    ],
    $o[0],
    []
); } },
2 => new class() implements \Symfony\Component\Cache\Traits\CachedValueInterface { public function getValue(): mixed { return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
        clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping')),
        clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
    ],
    null,
    [
        'stdClass' => [
            'namespace' => [
                'App\\Domain\\Tag',
            ],
            'rootEntityName' => [
                'App\\Domain\\Tag\\Tag',
            ],
            'identifier' => [
                [
                    'id',
                ],
            ],
            'generatorType' => [
                4,
            ],
            'fieldMappings' => [
                [
                    'id' => $o[1],
                    'name' => $o[2],
                ],
            ],
            'fieldNames' => [
                [
                    'id' => 'id',
                    'name' => 'name',
                ],
            ],
            'columnNames' => [
                [
                    'id' => 'id',
                    'name' => 'name',
                ],
            ],
            'table' => [
                [
                    'name' => 'tags',
                    'uniqueConstraints' => [
                        'uniq_tag_name' => [
                            'columns' => [
                                'name',
                            ],
                        ],
                    ],
                ],
            ],
            'associationMappings' => [
                [
                    'articles' => $o[3],
                ],
            ],
            'idGenerator' => [
                $o[4],
            ],
            'name' => [
                'App\\Domain\\Tag\\Tag',
            ],
            'id' => [
                1 => true,
            ],
            'type' => [
                1 => 'integer',
                'string',
            ],
            'fieldName' => [
                1 => 'id',
                'name',
            ],
            'columnName' => [
                1 => 'id',
                'name',
            ],
            'length' => [
                2 => 50,
            ],
            'unique' => [
                2 => true,
            ],
            'fetch' => [
                3 => 2,
            ],
            'sourceEntity' => [
                3 => 'App\\Domain\\Tag\\Tag',
            ],
            'mappedBy' => [
                3 => 'tags',
            ],
        ],
        'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
            'fieldName' => [
                3 => 'articles',
            ],
            'targetEntity' => [
                3 => 'App\\Domain\\Article\\Article',
            ],
        ],
    ],
    $o[0],
    []
); } },
3 => new class() implements \Symfony\Component\Cache\Traits\CachedValueInterface { public function getValue(): mixed { return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
        clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
        clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
        clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping')),
        clone ($p['Doctrine\\ORM\\Mapping\\JoinTableMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinTableMapping')),
        clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
        clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
        clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping')),
        clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
    ],
    null,
    [
        'stdClass' => [
            'namespace' => [
                'App\\Domain\\User',
            ],
            'rootEntityName' => [
                'App\\Domain\\User\\User',
            ],
            'identifier' => [
                [
                    'id',
                ],
            ],
            'generatorType' => [
                4,
            ],
            'fieldMappings' => [
                [
                    'id' => $o[1],
                    'email' => $o[2],
                    'username' => $o[3],
                    'password' => $o[4],
                    'bio' => $o[5],
                    'image' => $o[6],
                    'createdAt' => $o[7],
                    'updatedAt' => $o[8],
                ],
            ],
            'fieldNames' => [
                [
                    'id' => 'id',
                    'email' => 'email',
                    'username' => 'username',
                    'password' => 'password',
                    'bio' => 'bio',
                    'image' => 'image',
                    'created_at' => 'createdAt',
                    'updated_at' => 'updatedAt',
                ],
            ],
            'columnNames' => [
                [
                    'id' => 'id',
                    'email' => 'email',
                    'username' => 'username',
                    'password' => 'password',
                    'bio' => 'bio',
                    'image' => 'image',
                    'createdAt' => 'created_at',
                    'updatedAt' => 'updated_at',
                ],
            ],
            'table' => [
                [
                    'name' => 'users',
                ],
            ],
            'associationMappings' => [
                [
                    'articles' => $o[9],
                    'following' => $o[10],
                    'followers' => $o[14],
                ],
            ],
            'idGenerator' => [
                $o[15],
            ],
            'name' => [
                'App\\Domain\\User\\User',
                11 => 'user_followers',
                'follower_id',
                'user_id',
            ],
            'id' => [
                1 => true,
            ],
            'type' => [
                1 => 'integer',
                'string',
                'string',
                'string',
                'text',
                'string',
                'datetime_immutable',
                'datetime_immutable',
            ],
            'fieldName' => [
                1 => 'id',
                'email',
                'username',
                'password',
                'bio',
                'image',
                'createdAt',
                'updatedAt',
            ],
            'columnName' => [
                1 => 'id',
                'email',
                'username',
                'password',
                'bio',
                'image',
                'created_at',
                'updated_at',
            ],
            'length' => [
                2 => 255,
                50,
                255,
                6 => 255,
            ],
            'unique' => [
                2 => true,
                true,
                12 => false,
                false,
            ],
            'nullable' => [
                5 => true,
                true,
                12 => false,
                false,
            ],
            'fetch' => [
                9 => 2,
                2,
                14 => 2,
            ],
            'sourceEntity' => [
                9 => 'App\\Domain\\User\\User',
                'App\\Domain\\User\\User',
                14 => 'App\\Domain\\User\\User',
            ],
            'mappedBy' => [
                9 => 'author',
                14 => 'following',
            ],
            'inversedBy' => [
                10 => 'followers',
            ],
            'joinTable' => [
                10 => $o[11],
            ],
            'joinTableColumns' => [
                10 => [
                    'follower_id',
                    'user_id',
                ],
            ],
            'relationToSourceKeyColumns' => [
                10 => [
                    'follower_id' => 'id',
                ],
            ],
            'relationToTargetKeyColumns' => [
                10 => [
                    'user_id' => 'id',
                ],
            ],
            'joinColumns' => [
                11 => [
                    $o[12],
                ],
            ],
            'inverseJoinColumns' => [
                11 => [
                    $o[13],
                ],
            ],
            'deferrable' => [
                12 => false,
                false,
            ],
            'referencedColumnName' => [
                12 => 'id',
                'id',
            ],
        ],
        'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
            'fieldName' => [
                9 => 'articles',
                'following',
                14 => 'followers',
            ],
            'targetEntity' => [
                9 => 'App\\Domain\\Article\\Article',
                'App\\Domain\\User\\User',
                14 => 'App\\Domain\\User\\User',
            ],
        ],
    ],
    $o[0],
    []
); } },

]];
